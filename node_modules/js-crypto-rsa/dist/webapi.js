"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sign = sign;
exports.decrypt = exports.encrypt = exports.verify = exports.generateKey = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _jsEncodingUtils = _interopRequireDefault(require("js-encoding-utils"));

/**
 * webapi.js
 */

/**
 * Generate RSA public/private key pair.
 * @param {Number} modulusLength - Modulus length in bits, i.e., n.
 * @param {Uint8Array} publicExponent - Public exponent, i.e, e.
 * @param {Object} webCrypto - WebCryptoSubtle object, i.e., window.crypto.subtle or window.msCrypto.subtle.
 * @return {Promise<{publicKey: JsonWebKey, privateKey: JsonWebKey}>}
 */
var generateKey =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(modulusLength, publicExponent, webCrypto) {
    var publicKey, privateKey, alg, keys, _keys;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // generate rsa key
            // hash is used for signing and verification. never be used for key generation
            alg = {
              name: 'RSA-OAEP',
              modulusLength: modulusLength,
              publicExponent: publicExponent,
              hash: {
                name: 'SHA-256'
              }
            };

            if (!(typeof window.msCrypto === 'undefined')) {
              _context.next = 13;
              break;
            }

            _context.next = 4;
            return webCrypto.generateKey(alg, true, ['encrypt', 'decrypt']);

          case 4:
            keys = _context.sent;
            _context.next = 7;
            return webCrypto.exportKey('jwk', keys.publicKey);

          case 7:
            publicKey = _context.sent;
            _context.next = 10;
            return webCrypto.exportKey('jwk', keys.privateKey);

          case 10:
            privateKey = _context.sent;
            _context.next = 22;
            break;

          case 13:
            _context.next = 15;
            return msGenerateKey(alg, true, ['encrypt', 'decrypt'], webCrypto);

          case 15:
            _keys = _context.sent;
            _context.next = 18;
            return msExportKey('jwk', _keys.publicKey, webCrypto);

          case 18:
            publicKey = _context.sent;
            _context.next = 21;
            return msExportKey('jwk', _keys.privateKey, webCrypto);

          case 21:
            privateKey = _context.sent;

          case 22:
            // delete optional entries to export as general rsa sign/encrypt key
            ['key_ops', 'alg', 'ext'].forEach(function (elem) {
              delete publicKey[elem];
              delete privateKey[elem];
            });
            return _context.abrupt("return", {
              publicKey: publicKey,
              privateKey: privateKey
            });

          case 24:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function generateKey(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * RSA signing via RSA-PSS or RSASSA-PKCS1-v1_5 in WebAPI.
 * @param {Uint8Array} msg - Byte array of message to be signed.
 * @param {JsonWebKey} privateJwk - Private key for signing in JWK format.
 * @param {String} hash - Name of hash algorithm like 'SHA-256'.
 * @param {RSASignAlgorithm} algorithm - Object to specify algorithm parameters.
 * @param {Object} webCrypto - WebCryptoSubtle object
 * @return {Promise<Uint8Array>} - Byte array of raw signature.
 * @throws {Error} - if RSA-PSS in IE.
 */


exports.generateKey = generateKey;

function sign(_x4, _x5, _x6, _x7, _x8) {
  return _sign.apply(this, arguments);
}
/**
 * Verification of RSA signature via RSA-PSS or RSASSA-PKCS1-v1_5 in WebAPI.
 * @param {Uint8Array} msg - Byte array of message signed.
 * @param {Uint8Array} signature - Byte array of raw signature.
 * @param {JsonWebKey} publicJwk - public key for signing in JWK format.
 * @param {String} hash - Name of hash algorithm like 'SHA-256'.
 * @param {RSASignAlgorithm} algorithm - Object to specify algorithm parameters.
 * @param {Object} webCrypto - WebCryptoSubtle object
 * @return {Promise<boolean>} - Result of verification.
 * @throws {Error} - if RSA-PSS in IE.
 */


function _sign() {
  _sign = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee5(msg, privateJwk, hash, algorithm, webCrypto) {
    var algo, signature, key, _key4;

    return _regenerator.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            algo = {
              name: algorithm.name,
              hash: {
                name: hash
              },
              saltLength: algorithm.saltLength
            };

            if (!(typeof window.msCrypto === 'undefined')) {
              _context5.next = 10;
              break;
            }

            _context5.next = 4;
            return webCrypto.importKey('jwk', privateJwk, algo, false, ['sign']);

          case 4:
            key = _context5.sent;
            _context5.next = 7;
            return webCrypto.sign(algo, key, msg);

          case 7:
            signature = _context5.sent;
            _context5.next = 18;
            break;

          case 10:
            if (!(algorithm.name === 'RSA-PSS')) {
              _context5.next = 12;
              break;
            }

            throw new Error('IE does not support RSA-PSS. Use RSASSA-PKCS1-v1_5.');

          case 12:
            _context5.next = 14;
            return msImportKey('jwk', privateJwk, algo, false, ['sign'], webCrypto);

          case 14:
            _key4 = _context5.sent;
            _context5.next = 17;
            return msSign(algo, _key4, msg, webCrypto);

          case 17:
            signature = _context5.sent;

          case 18:
            return _context5.abrupt("return", new Uint8Array(signature));

          case 19:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _sign.apply(this, arguments);
}

var verify =
/*#__PURE__*/
function () {
  var _ref2 = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee2(msg, signature, publicJwk, hash, algorithm, webCrypto) {
    var algo, valid, key, _key;

    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            algo = {
              name: algorithm.name,
              hash: {
                name: hash
              },
              saltLength: algorithm.saltLength
            };

            if (!(typeof window.msCrypto === 'undefined')) {
              _context2.next = 10;
              break;
            }

            _context2.next = 4;
            return webCrypto.importKey('jwk', publicJwk, algo, false, ['verify']);

          case 4:
            key = _context2.sent;
            _context2.next = 7;
            return webCrypto.verify(algo, key, signature, msg);

          case 7:
            valid = _context2.sent;
            _context2.next = 18;
            break;

          case 10:
            if (!(algorithm.name === 'RSA-PSS')) {
              _context2.next = 12;
              break;
            }

            throw new Error('IE does not support RSA-PSS. Use RSASSA-PKCS1-v1_5.');

          case 12:
            _context2.next = 14;
            return msImportKey('jwk', publicJwk, algo, false, ['verify'], webCrypto);

          case 14:
            _key = _context2.sent;
            _context2.next = 17;
            return msVerify(algo, _key, signature, msg, webCrypto);

          case 17:
            valid = _context2.sent;

          case 18:
            return _context2.abrupt("return", valid);

          case 19:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function verify(_x9, _x10, _x11, _x12, _x13, _x14) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * RSA Encryption via WebAPI.
 * @param {Uint8Array} msg - Byte array of message to be encrypted
 * @param {JsonWebKey} publicJwk - Public key in JWK format.
 * @param {String} hash - Name of hash algorithm like 'SHA-256'
 * @param {Uint8Array} label - RSA-OAEP label.
 * @param {Object} webCrypto - WebCryptoSubtle object
 * @return {Promise<Uint8Array>} - Encrypted message.
 * @throws {Error} - if RSA-OAEP label is specified in IE.
 */


exports.verify = verify;

var encrypt =
/*#__PURE__*/
function () {
  var _ref3 = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee3(msg, publicJwk, hash, label, webCrypto) {
    var algo, encrypted, key, _key2;

    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            algo = {
              name: 'RSA-OAEP',
              hash: {
                name: hash
              },
              label: label
            };

            if (!(typeof window.msCrypto === 'undefined')) {
              _context3.next = 10;
              break;
            }

            _context3.next = 4;
            return webCrypto.importKey('jwk', publicJwk, algo, false, ['encrypt']);

          case 4:
            key = _context3.sent;
            _context3.next = 7;
            return webCrypto.encrypt(algo, key, msg);

          case 7:
            encrypted = _context3.sent;
            _context3.next = 18;
            break;

          case 10:
            if (!(label.toString() !== new Uint8Array().toString())) {
              _context3.next = 12;
              break;
            }

            throw new Error('IE does not support RSA-OAEP label.');

          case 12:
            _context3.next = 14;
            return msImportKey('jwk', publicJwk, algo, false, ['encrypt'], webCrypto);

          case 14:
            _key2 = _context3.sent;
            _context3.next = 17;
            return msEncrypt(algo, _key2, msg, webCrypto);

          case 17:
            encrypted = _context3.sent;

          case 18:
            return _context3.abrupt("return", new Uint8Array(encrypted));

          case 19:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function encrypt(_x15, _x16, _x17, _x18, _x19) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * RSA Decryption via WebAPI.
 * @param {Uint8Array} msg - encrypted message byte array.
 * @param {JsonWebKey} privateJwk - Private key in JWK format.
 * @param {String} hash - Name of hash algorithm like 'SHA-256'
 * @param {Uint8Array} label - RSA-OAEP label.
 * @param {Object} webCrypto - WebCryptoSubtle object.
 * @return {Promise<Uint8Array>} - Decrypted message.
 * @throws {Error} - if RSA-OAEP label is specified in IE.
 */


exports.encrypt = encrypt;

var decrypt =
/*#__PURE__*/
function () {
  var _ref4 = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee4(msg, privateJwk, hash, label, webCrypto) {
    var algo, decrypted, key, _key3;

    return _regenerator.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            algo = {
              name: 'RSA-OAEP',
              hash: {
                name: hash
              },
              label: label
            };

            if (!(typeof window.msCrypto === 'undefined')) {
              _context4.next = 10;
              break;
            }

            _context4.next = 4;
            return webCrypto.importKey('jwk', privateJwk, algo, false, ['decrypt']);

          case 4:
            key = _context4.sent;
            _context4.next = 7;
            return webCrypto.decrypt(algo, key, msg);

          case 7:
            decrypted = _context4.sent;
            _context4.next = 18;
            break;

          case 10:
            if (!(label.toString() !== new Uint8Array().toString())) {
              _context4.next = 12;
              break;
            }

            throw new Error('IE does not support RSA-OAEP label.');

          case 12:
            _context4.next = 14;
            return msImportKey('jwk', privateJwk, algo, false, ['decrypt'], webCrypto);

          case 14:
            _key3 = _context4.sent;
            _context4.next = 17;
            return msDecrypt(algo, _key3, msg, webCrypto);

          case 17:
            decrypted = _context4.sent;

          case 18:
            return _context4.abrupt("return", new Uint8Array(decrypted));

          case 19:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function decrypt(_x20, _x21, _x22, _x23, _x24) {
    return _ref4.apply(this, arguments);
  };
}(); /////////////////////////////////////////////
// function definitions for IE


exports.decrypt = decrypt;

var msGenerateKey = function msGenerateKey(alg, ext, use, webCrypto) {
  return new Promise(function (resolve, reject) {
    var op = webCrypto.generateKey(alg, ext, use);

    op.oncomplete = function (evt) {
      resolve(evt.target.result);
    };

    op.onerror = function () {
      reject('KeyGenerationFailed');
    };
  });
};

var msImportKey = function msImportKey(type, key, alg, ext, use, webCrypto) {
  return new Promise(function (resolve, reject) {
    var inputKey = key;

    if (type === 'jwk') {
      inputKey = JSON.stringify(key);
      inputKey = _jsEncodingUtils.default.encoder.stringToArrayBuffer(inputKey);
    }

    var op = webCrypto.importKey(type, inputKey, alg, ext, use);

    op.oncomplete = function (evt) {
      resolve(evt.target.result);
    };

    op.onerror = function () {
      reject('KeyImportingFailed');
    };
  });
};

var msExportKey = function msExportKey(type, key, webCrypto) {
  return new Promise(function (resolve, reject) {
    var op = webCrypto.exportKey(type, key);

    op.oncomplete = function (evt) {
      var output = evt.target.result;

      if (type === 'jwk') {
        output = _jsEncodingUtils.default.encoder.arrayBufferToString(new Uint8Array(output));
        output = JSON.parse(output);
      }

      resolve(output);
    };

    op.onerror = function () {
      reject('KeyExportingFailed');
    };
  });
};

var msEncrypt = function msEncrypt(alg, key, msg, webCrypto) {
  return new Promise(function (resolve, reject) {
    delete alg.label; // if exists, the MSCrypto doesn't work...wtf

    var op = webCrypto.encrypt(alg, key, msg);

    op.oncomplete = function (evt) {
      resolve(evt.target.result);
    };

    op.onerror = function () {
      reject('EncryptionFailure');
    };
  });
};

var msDecrypt = function msDecrypt(alg, key, data, webCrypto) {
  return new Promise(function (resolve, reject) {
    delete alg.label; // if exists, the MSCrypto doesn't work...wtf

    var op = webCrypto.decrypt(alg, key, data);

    op.oncomplete = function (evt) {
      resolve(evt.target.result);
    };

    op.onerror = function () {
      reject('DecryptionFailure');
    };
  });
};

var msSign = function msSign(alg, key, msg, webCrypto) {
  return new Promise(function (resolve, reject) {
    var op = webCrypto.sign(alg, key, msg);

    op.oncomplete = function (evt) {
      resolve(evt.target.result);
    };

    op.onerror = function () {
      reject('SigningFailed');
    };
  });
};

var msVerify = function msVerify(alg, key, sig, msg, webCrypto) {
  return new Promise(function (resolve, reject) {
    var op = webCrypto.verify(alg, key, sig, msg);

    op.oncomplete = function (evt) {
      resolve(evt.target.result);
    };

    op.onerror = function () {
      reject('VerificationFailed');
    };
  });
};