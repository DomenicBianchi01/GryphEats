"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decrypt = exports.encrypt = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _jsCryptoRandom = _interopRequireDefault(require("js-crypto-random"));

var _jsCryptoEc = _interopRequireDefault(require("js-crypto-ec"));

var _jsCryptoHkdf = _interopRequireDefault(require("js-crypto-hkdf"));

var _jsCryptoAes = _interopRequireDefault(require("js-crypto-aes"));

var _params = _interopRequireDefault(require("./params.js"));

/**
 * pkcec.js
 */
var encrypt =
/*#__PURE__*/
function () {
  var _ref2 = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(msg, publicKey, _ref) {
    var privateKey, _ref$hash, hash, _ref$encrypt, encrypt, _ref$keyLength, keyLength, _ref$iv, iv, _ref$info, info, sharedSecret, hkdfOutput, data;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            privateKey = _ref.privateKey, _ref$hash = _ref.hash, hash = _ref$hash === void 0 ? 'SHA-256' : _ref$hash, _ref$encrypt = _ref.encrypt, encrypt = _ref$encrypt === void 0 ? 'AES-GCM' : _ref$encrypt, _ref$keyLength = _ref.keyLength, keyLength = _ref$keyLength === void 0 ? 32 : _ref$keyLength, _ref$iv = _ref.iv, iv = _ref$iv === void 0 ? null : _ref$iv, _ref$info = _ref.info, info = _ref$info === void 0 ? '' : _ref$info;
            _context.next = 3;
            return _jsCryptoEc.default.deriveSecret(publicKey, privateKey);

          case 3:
            sharedSecret = _context.sent;
            _context.next = 6;
            return _jsCryptoHkdf.default.compute(sharedSecret, hash, keyLength, info);

          case 6:
            hkdfOutput = _context.sent;

            if (!(encrypt !== 'AES-KW')) {
              _context.next = 22;
              break;
            }

            if (iv) {
              _context.next = 14;
              break;
            }

            _context.next = 11;
            return _jsCryptoRandom.default.getRandomBytes(_params.default.ciphers[encrypt].ivLength);

          case 11:
            _context.t0 = _context.sent;
            _context.next = 15;
            break;

          case 14:
            _context.t0 = iv;

          case 15:
            iv = _context.t0;
            _context.next = 18;
            return _jsCryptoAes.default.encrypt(msg, hkdfOutput.key, {
              name: encrypt,
              iv: iv
            });

          case 18:
            data = _context.sent;
            return _context.abrupt("return", {
              data: data,
              salt: hkdfOutput.salt,
              iv: iv
            });

          case 22:
            _context.next = 24;
            return _jsCryptoAes.default.wrapKey(msg, hkdfOutput.key, {
              name: encrypt
            });

          case 24:
            data = _context.sent;
            return _context.abrupt("return", {
              data: data,
              salt: hkdfOutput.salt
            });

          case 26:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function encrypt(_x, _x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();

exports.encrypt = encrypt;

var decrypt =
/*#__PURE__*/
function () {
  var _ref4 = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee2(data, privateKey, _ref3) {
    var publicKey, _ref3$hash, hash, _ref3$encrypt, encrypt, _ref3$keyLength, keyLength, _ref3$info, info, _ref3$salt, salt, _ref3$iv, iv, sharedSecret, hkdfOutput;

    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            publicKey = _ref3.publicKey, _ref3$hash = _ref3.hash, hash = _ref3$hash === void 0 ? 'SHA-256' : _ref3$hash, _ref3$encrypt = _ref3.encrypt, encrypt = _ref3$encrypt === void 0 ? 'AES-GCM' : _ref3$encrypt, _ref3$keyLength = _ref3.keyLength, keyLength = _ref3$keyLength === void 0 ? 32 : _ref3$keyLength, _ref3$info = _ref3.info, info = _ref3$info === void 0 ? '' : _ref3$info, _ref3$salt = _ref3.salt, salt = _ref3$salt === void 0 ? null : _ref3$salt, _ref3$iv = _ref3.iv, iv = _ref3$iv === void 0 ? null : _ref3$iv;
            _context2.next = 3;
            return _jsCryptoEc.default.deriveSecret(publicKey, privateKey);

          case 3:
            sharedSecret = _context2.sent;
            _context2.next = 6;
            return _jsCryptoHkdf.default.compute(sharedSecret, hash, keyLength, info, salt);

          case 6:
            hkdfOutput = _context2.sent;

            if (!(encrypt !== 'AES-KW')) {
              _context2.next = 11;
              break;
            }

            return _context2.abrupt("return", _jsCryptoAes.default.decrypt(data, hkdfOutput.key, {
              name: encrypt,
              iv: iv
            }));

          case 11:
            return _context2.abrupt("return", _jsCryptoAes.default.unwrapKey(data, hkdfOutput.key, {
              name: encrypt
            }));

          case 12:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function decrypt(_x4, _x5, _x6) {
    return _ref4.apply(this, arguments);
  };
}();

exports.decrypt = decrypt;