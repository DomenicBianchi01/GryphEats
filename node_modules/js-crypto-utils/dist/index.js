"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "aes", {
  enumerable: true,
  get: function get() {
    return _jsCryptoAes.default;
  }
});
Object.defineProperty(exports, "random", {
  enumerable: true,
  get: function get() {
    return _jsCryptoRandom.default;
  }
});
Object.defineProperty(exports, "hash", {
  enumerable: true,
  get: function get() {
    return _jsCryptoHash.default;
  }
});
Object.defineProperty(exports, "hmac", {
  enumerable: true,
  get: function get() {
    return _jsCryptoHmac.default;
  }
});
Object.defineProperty(exports, "hkdf", {
  enumerable: true,
  get: function get() {
    return _jsCryptoHkdf.default;
  }
});
Object.defineProperty(exports, "x509", {
  enumerable: true,
  get: function get() {
    return _jsX509Utils.default;
  }
});
Object.defineProperty(exports, "pbkdf", {
  enumerable: true,
  get: function get() {
    return _jsCryptoPbkdf.default;
  }
});
Object.defineProperty(exports, "Key", {
  enumerable: true,
  get: function get() {
    return _jsCryptoKeyUtils.Key;
  }
});
exports.pkc = exports.default = void 0;

var _jsCryptoAes = _interopRequireDefault(require("js-crypto-aes"));

var _jsCryptoRandom = _interopRequireDefault(require("js-crypto-random"));

var _jsCryptoHash = _interopRequireDefault(require("js-crypto-hash"));

var _jsCryptoHmac = _interopRequireDefault(require("js-crypto-hmac"));

var _jsCryptoHkdf = _interopRequireDefault(require("js-crypto-hkdf"));

var _jsX509Utils = _interopRequireDefault(require("js-x509-utils"));

var _jsCryptoPbkdf = _interopRequireDefault(require("js-crypto-pbkdf"));

var _jsCryptoKeyUtils = require("js-crypto-key-utils");

var pkc = _interopRequireWildcard(require("./pkc.js"));

exports.pkc = pkc;

/**
 * index.js
 * Structure of API
 * ---- Key (Key object with methods handling EC and RSA public keys)
 *  |
 *  |-- pkc (public key crypto, EC and RSA) // TODO: Encrypt/decrypt with ECDH standardized procedure
 *  |    |-- generateKey
 *  |    |-- encrypt
 *  |    |-- decrypt
 *  |    |-- sign
 *  |    |-- verify
 *  |
 *  |-- x509 // TODO verify self-signed certificate in single line
 *  |    |-- toJwk
 *  |    |-- fromJwk
 *  |    |-- parse (verify)
 *  |
 *  |-- aes
 *  |-- random
 *  |-- hash
 *  |-- hmac
 *  |-- hkdf
 *  |-- pbkdf
 */
var _default = {
  Key: _jsCryptoKeyUtils.Key,
  pkc: pkc,
  x509: _jsX509Utils.default,
  aes: _jsCryptoAes.default,
  random: _jsCryptoRandom.default,
  hash: _jsCryptoHash.default,
  hmac: _jsCryptoHmac.default,
  hkdf: _jsCryptoHkdf.default,
  pbkdf: _jsCryptoPbkdf.default
};
exports.default = _default;